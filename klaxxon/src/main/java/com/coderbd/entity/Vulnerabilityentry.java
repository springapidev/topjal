/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.coderbd.entity;

import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 *
 * @author Rajail Islam
 */
@Entity
@Table(name = "vulnerability_entry", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"CSFEntryID"})})
public class Vulnerabilityentry implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(nullable = false)
    private Integer vulnerabilityEntryID;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Column(precision = 12)
    private Float currentLevelCover;
    @JoinColumn(name = "CSFEntryID", referencedColumnName = "CSFEntryID", nullable = false)
    @OneToOne(optional = false, fetch = FetchType.LAZY)
    private Csfentry cSFEntryID;
    @JoinColumn(name = "ImpactTypeID", referencedColumnName = "ImpactTypeID", nullable = false)
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Impacttypes impactTypeID;
    @JoinColumn(name = "VulnerabilityTypeID", referencedColumnName = "VulnerabilityTypeID", nullable = false)
    @ManyToOne(optional = false, fetch = FetchType.LAZY)
    private Vulnerabilitytypes vulnerabilityTypeID;

    public Vulnerabilityentry() {
    }

    public Vulnerabilityentry(Integer vulnerabilityEntryID) {
        this.vulnerabilityEntryID = vulnerabilityEntryID;
    }

    public Integer getVulnerabilityEntryID() {
        return vulnerabilityEntryID;
    }

    public void setVulnerabilityEntryID(Integer vulnerabilityEntryID) {
        this.vulnerabilityEntryID = vulnerabilityEntryID;
    }

    public Float getCurrentLevelCover() {
        return currentLevelCover;
    }

    public void setCurrentLevelCover(Float currentLevelCover) {
        this.currentLevelCover = currentLevelCover;
    }

    public Csfentry getCSFEntryID() {
        return cSFEntryID;
    }

    public void setCSFEntryID(Csfentry cSFEntryID) {
        this.cSFEntryID = cSFEntryID;
    }

    public Impacttypes getImpactTypeID() {
        return impactTypeID;
    }

    public void setImpactTypeID(Impacttypes impactTypeID) {
        this.impactTypeID = impactTypeID;
    }

    public Vulnerabilitytypes getVulnerabilityTypeID() {
        return vulnerabilityTypeID;
    }

    public void setVulnerabilityTypeID(Vulnerabilitytypes vulnerabilityTypeID) {
        this.vulnerabilityTypeID = vulnerabilityTypeID;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (vulnerabilityEntryID != null ? vulnerabilityEntryID.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Vulnerabilityentry)) {
            return false;
        }
        Vulnerabilityentry other = (Vulnerabilityentry) object;
        if ((this.vulnerabilityEntryID == null && other.vulnerabilityEntryID != null) || (this.vulnerabilityEntryID != null && !this.vulnerabilityEntryID.equals(other.vulnerabilityEntryID))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "klaxxon_reverse_eng.Vulnerabilityentry[ vulnerabilityEntryID=" + vulnerabilityEntryID + " ]";
    }
    
}
